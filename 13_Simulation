| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers    
 4: Vectors                    5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                      9: Functions               
10: lapply and sapply         11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 13

  |                                                                                         |   0%

| One of the great advantages of using a statistical programming language like R is its vast
| collection of tools for simulating random numbers.

...

  |===                                                                                      |   3%

| This lesson assumes familiarity with a few common probability distributions, but these topics
| will only be discussed with respect to random number generation. Even if you have no prior
| experience with these concepts, you should be able to complete the lesson and understand the
| main ideas.

...

  |=====                                                                                    |   6%

| The first function we'll use to generate random numbers is sample(). Use ?sample to pull up the
| documentation.

warning messages from top-level task callback 'mini'
Warning message:
In readLines(input) :
  incomplete final line found on 'C:/Users/Sudhanshu/Documents/R/win-library/3.2/swirl/Courses/R_Programming/Simulation/lesson.yaml'
> ?sample

| You are amazing!

  |========                                                                                 |   9%

| Let's simulate rolling four six-sided dice: sample(1:6, 4, replace = TRUE).

> sample(1:6,4,replace=TRUE)
[1] 1 6 5 6

| All that hard work is paying off!

  |===========                                                                              |  12%

| Now repeat the command to see how your result differs. (The probability of rolling the exact
| same result is (1/6)^4 = 0.00077, which is pretty small!)

> sample(1:6,4,replace=TRUE)
[1] 5 5 3 4

| Keep up the great work!

  |=============                                                                            |  15%

| sample(1:6, 4, replace = TRUE) instructs R to randomly select four numbers between 1 and 6, WITH
| replacement. Sampling with replacement simply means that each number is "replaced" after it is
| selected, so that the same number can show up more than once. This is what we want here, since
| what you roll on one die shouldn't affect what you roll on any of the others.

...

  |================                                                                         |  18%

| Now sample 10 numbers between 1 and 20, WITHOUT replacement. To sample without replacement,
| simply leave off the 'replace' argument.

> sample(1:20,10,replace=FALSE)
 [1]  6  2 14 12 15  1 10 16 17 11

| Try again. Getting it right on the first try is boring anyway! Or, type info() for more options.

| Type sample(1:20, 10) to sample 10 numbers between 1 and 20, without replacement.

> sample(1:20,10)
 [1]  4 18 20 16 14  8  7  1 13  2

| All that practice is paying off!

  |===================                                                                      |  21%

| Since the last command sampled without replacement, no number appears more than once in the
| output.

...

  |======================                                                                   |  24%

| LETTERS is a predefined variable in R containing a vector of all 26 letters of the English
| alphabet. Take a look at it now.

> LETTERS
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W"
[24] "X" "Y" "Z"

| You got it!

  |========================                                                                 |  27%

| The sample() function can also be used to permute, or rearrange, the elements of a vector. For
| example, try sample(LETTERS) to permute all 26 letters of the English alphabet.

> sample(LETTERS)
 [1] "O" "N" "B" "H" "I" "S" "Y" "F" "D" "L" "G" "U" "V" "K" "T" "Q" "X" "J" "Z" "C" "W" "R" "E"
[24] "M" "A" "P"

| You got it!

  |===========================                                                              |  30%

| This is identical to taking a sample of size 26 from LETTERS, without replacement. When the
| 'size' argument to sample() is not specified, R takes a sample equal in size to the vector from
| which you are sampling.

...

  |==============================                                                           |  33%

| Now, suppose we want to simulate 100 flips of an unfair two-sided coin. This particular coin has
| a 0.3 probability of landing 'tails' and a 0.7 probability of landing 'heads'.

...

  |================================                                                         |  36%

| Let the value 0 represent tails and the value 1 represent heads. Use sample() to draw a sample
| of size 100 from the vector c(0,1), with replacement. Since the coin is unfair, we must attach
| specific probabilities to the values 0 (tails) and 1 (heads) with a fourth argument, prob =
| c(0.3, 0.7). Assign the result to a new variable called flips.

> sample(c(0,1),100,prob=c(0.3,0.7))
Error in sample.int(length(x), size, replace, prob) : 
  cannot take a sample larger than the population when 'replace = FALSE'
> sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
  [1] 1 1 1 0 0 0 1 1 1 1 1 1 1 0 1 1 0 1 0 1 0 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 0 1 1 0 0 1 0 0
 [48] 1 1 1 1 0 1 1 1 1 0 1 1 0 1 1 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1
 [95] 1 1 1 1 1 1

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type info() for more
| options.

| The following command will produce 100 flips of an unfair coin and assign the result: flips <-
| sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

> sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
  [1] 1 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 0 0 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 0 1 0 1 1 1
 [48] 1 1 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 0 0 0 1 1 1 0 1 0 0 0 1 0 1 0 1 1 1 1 1 0 0 1 0 1 0 0 1 1 1
 [95] 1 0 1 1 1 0

| Keep trying! Or, type info() for more options.

| The following command will produce 100 flips of an unfair coin and assign the result: flips <-
| sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

> flips<-sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

| You're the best!

  |===================================                                                      |  39%

| View the contents of the flips variable.

> flips
  [1] 1 1 1 0 1 1 0 1 0 1 0 1 1 1 0 1 0 1 1 1 1 0 1 1 1 1 0 0 0 1 1 1 0 0 1 0 1 1 1 0 1 1 1 0 1 0 1
 [48] 1 0 0 1 1 1 1 1 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 1 1 1 1 1 1 1 0 1 0
 [95] 0 0 1 0 0 1

| You nailed it! Good job!

  |======================================                                                   |  42%

| Since we set the probability of landing heads on any given flip to be 0.7, we'd expect
| approximately 70 of our coin flips to have the value 1. Count the actual number of 1s contained
| in flips using the sum() function.

> sum(flips)
[1] 63

| Nice work!

  |========================================                                                 |  45%

| A coin flip is a binary outcome (0 or 1) and we are performing 100 independent trials (coin
| flips), so we can use rbinom() to simulate a binomial random variable. Pull up the documentation
| for rbinom() using ?rbinom.

> ?rbinom

| Nice work!

  |===========================================                                              |  48%

| Each probability distribution in R has an r*** function (for "random"), a d*** function (for
| "density"), a p*** (for "probability"), and q*** (for "quantile"). We are most interested in the
| r*** functions in this lesson, but I encourage you to explore the others on your own.

...

  |==============================================                                           |  52%

| A binomial random variable represents the number of 'successes' (heads) in a given number of
| independent 'trials' (coin flips). Therefore, we can generate a single random variable that
| represents the number of heads in 100 flips of our unfair coin using rbinom(1, size = 100, prob
| = 0.7). Note that you only specify the probability of 'success' (heads) and NOT the probability
| of 'failure' (tails). Try it now.

> rbinom(1,size = 100, prob =0.7)
[1] 69

| You got it right!

  |=================================================                                        |  55%

| Equivalently, if we want to see all of the 0s and 1s, we can request 100 observations, each of
| size 1, with success probability of 0.7. Give it a try, assigning the result to a new variable
| called flips2.

> flips2<-rbinom(c(0,1),size = 100, prob =0.7)

| Keep trying! Or, type info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to flips2.

> flips2<-rbinom(100, size =1 ,prob=0.7)

| You nailed it! Good job!

  |===================================================                                      |  58%

| View the contents of flips2.

> flips2
  [1] 1 1 1 1 1 1 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 0 0 0 0 1 1 1 1
 [48] 1 0 1 0 0 0 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 0 1 0 1 1 0 0 1 1 1 0 1 1 0 0
 [95] 1 1 1 1 1 0

| Keep working like that and you'll get there!

  |======================================================                                   |  61%

| Now use sum() to count the number of 1s (heads) in flips2. It should be close to 70!

> sum(flips2)
[1] 69

| Keep up the great work!

  |=========================================================                                |  64%

| Similar to rbinom(), we can use R to simulate random numbers from many other probability
| distributions. Pull up the documentation for rnorm() now.

> ?rnorm

| That's a job well done!

  |===========================================================                              |  67%

| The standard normal distribution has mean 0 and standard deviation 1. As you can see under the
| 'Usage' section in the documentation, the default values for the 'mean' and 'sd' arguments to
| rnorm() are 0 and 1, respectively. Thus, rnorm(10) will generate 10 random numbers from a
| standard normal distribution. Give it a try.

> rnorm(10)
 [1]  0.179333154 -2.209992699  0.914823281  0.796930137  0.444260309  0.875765392  0.693222824
 [8] -0.584446557 -0.002492025 -0.851825319

| Excellent job!

  |==============================================================                           |  70%

| Now do the same, except with a mean of 100 and a standard deviation of 25.

> rnorm(10, mean = 100, sd = 25)
 [1] 120.34061  93.55372 117.48772 135.81051 119.16364  39.02091  76.92477 107.48845  77.93771
[10]  46.24107

| You're the best!

  |=================================================================                        |  73%

| Finally, what if we want to simulate 100 *groups* of random numbers, each containing 5 values
| generated from a Poisson distribution with mean 10? Let's start with one group of 5 numbers,
| then I'll show you how to repeat the operation 100 times in a convenient and compact way.

...

  |===================================================================                      |  76%

| Generate 5 random values from a Poisson distribution with mean 10. Check out the documentation
| for rpois() if you need help.

> rpois(5,mean = 10)
Error in rpois(5, mean = 10) : unused argument (mean = 10)
> ?rpois
> rpois(5, 10)
[1] 12 13 10 12 12

| All that practice is paying off!

  |======================================================================                   |  79%

| Now use replicate(100, rpois(5, 10)) to perform this operation 100 times. Store the result in a
| new variable called my_pois.

> my_pois<-replicate(100, rpois(5,10))

| Excellent work!

  |=========================================================================                |  82%

| Take a look at the contents of my_pois.

> my_pois
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17]
[1,]    8   11   13   11   14    9   11   10   11    13     6    11    14    11    13     4    15
[2,]    9    7    4   14   11   10   10    4   10     6     3    10     6    12    13    11    10
[3,]    9    8   10   13    6    9   10    8   10     2     9    13    12     8    15    12     7
[4,]    8   13   12   13   11   12   13   11   14     7     5     7     7     8    14    16     9
[5,]   11   11    7   11   13   10    6   11    9     9    11    11    10     8    16    10    11
     [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32]
[1,]     5     9     9    11     6     4    11    10     7    10    11    12    10    12    11
[2,]    12     7    11     7     7     6    12     9    10    12    11    16    11     3    10
[3,]     8     5    10    11     7    10    12     9    10     9    14    10    16     8     9
[4,]     9     8     8    12    14     7     9     2    13     8    13     6    11     9     4
[5,]    22     6    11    12     8     9    16    11     9     5     8    10    11    15     9
     [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47]
[1,]    13     5     7     9     9    11     9    18    17    12     8    10     9     8    13
[2,]    13     6    13    13    10    10     7     5    13    10     9    10    11     7     7
[3,]     9    10    12     6     6    10    10    10     9     7     7    10     8     8    11
[4,]    14     6     6     9     8     6     9     9     8     6    13    12     8    11    12
[5,]     3    14     8    12    10     9    12    14     6     8     8     5     6    10    10
     [,48] [,49] [,50] [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62]
[1,]    13     8     9    11    11    15    13    10    10     7    12     6     8     8    12
[2,]     6    10     7     9    17    12    11    11    10     9     8     5    11    11    10
[3,]     9     7    10    12    12    15     9     9     6     2    11     8    14     9    13
[4,]     9     7    15    11    11     9    13    15     9     9     9    20    10    13     6
[5,]     5     8     4     6    10    13    10     9     8    11     3    12     9    11     6
     [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] [,75] [,76] [,77]
[1,]     8     9    15    10    13     9     9     5    13    15     4    11    10     6    10
[2,]    16     8    10     5    16     9    13    16     9     7     6     4     6     9    11
[3,]    14     5    13    11     7     5     6     6    13     6     8    10    13    10     5
[4,]     8     4     6    16    15    14    10     7    10    18     3    11     7    14    10
[5,]     8     9     7    12    13    10    17     9    13    11     6    16     8     8    15
     [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] [,87] [,88] [,89] [,90] [,91] [,92]
[1,]    11     5     7     6     9    10    10     7    10    11     8     4     6     8    10
[2,]    17     9    10    10     9     9     7     7     5     5    11     8     7    17     8
[3,]     4    12    14    11     6    11     9    11     8    10     7     8    12    10    11
[4,]    16    11    12    11     7    14    18     8    16    11    19     7     4    13     6
[5,]     8    12    14    16     9     9    10    13    12     8    15     6     8    14    16
     [,93] [,94] [,95] [,96] [,97] [,98] [,99] [,100]
[1,]    10     7    13    13    12    14     7      6
[2,]     8    12    13    12     7    14    10      6
[3,]     7     3     8     8     8    12    13     19
[4,]    15     9     8    13    10     8    11      8
[5,]     7     4     7     6    12     9     9      8

| Excellent job!

  |============================================================================             |  85%

| replicate() created a matrix, each column of which contains 5 random numbers generated from a
| Poisson distribution with mean 10. Now we can find the mean of each column in my_pois using the
| colMeans() function. Store the result in a variable called cm.

> cm<-colMeans(my_pois)

| You got it!

  |==============================================================================           |  88%

| And let's take a look at the distribution of our column means by plotting a histogram with
| hist(cm).

> hist(cm)

| You got it right!

  |=================================================================================        |  91%

| Looks like our column means are almost normally distributed, right? That's the Central Limit
| Theorem at work, but that's a lesson for another day!

...

  |====================================================================================     |  94%

| All of the standard probability distributions are built into R, including exponential (rexp()),
| chi-squared (rchisq()), gamma (rgamma()), .... Well, you see the pattern.

...

  |======================================================================================   |  97%

| Simulation is practically a field of its own and we've only skimmed the surface of what's
| possible. I encourage you to explore these and other functions further on your own.

...

  |=========================================================================================| 100%
