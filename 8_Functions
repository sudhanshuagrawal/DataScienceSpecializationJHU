## Functions

 Try using evaluate() along with an anonymous function to return the first element of
| the vector c(8, 4, 0). Your anonymous function should only take one argument which
| should be a variable `x`.

> evaluate(function(x){x[1]},c(8,4,0))
[1] 8

| You are amazing!

  |=====================================================                        |  69%

| Now try using evaluate() along with an anonymous function to return the last element
| of the vector c(8, 4, 0). Your anonymous function should only take one argument
| which should be a variable `x`.

> evaluate(function(x){x[3]},c(8,4,0))
[1] 0

| One more time. You can do it! Or, type info() for more options.

| You may need to recall how to index vector elements. Remember that your anonymous
| function should only have one argument, and that argument should be named `x`. Using
| the length() function in your anonymous function may help you.

> evaluate(function(x){x[length(x)]},c(8,4,0))
[1] 0

| All that hard work is paying off!

  |=======================================================                      |  71%

| For the rest of the course we're going to use the paste() function frequently. Type
| ?paste so we can take a look at the documentation for the paste function.

> ?paste

| Keep working like that and you'll get there!

  |=========================================================                    |  73%

| As you can see the first argument of paste() is `...` which is referred to as an
| ellipsis or simply dot-dot-dot. The ellipsis allows an indefinite number of
| arguments to be passed into a function. In the case of paste() any number of strings
| can be passed as arguments and paste() will return all of the strings combined into
| one string.

...

  |==========================================================                   |  76%

| Just to see how paste() works, type paste("Programming", "is", "fun!")

> paste("Programming","is","fun!")
[1] "Programming is fun!"

| Excellent work!

  |============================================================                 |  78%

| Time to write our own modified version of paste().

...

  |=============================================================                |  80%

| Make sure to save your script before you type submit().

> telegram <- function(...){
+   paste("START",...,"STOP",sep=" ")
+   
+   
+ }
> submit()

| Sourcing your script...


| You are doing so well!

  |===============================================================              |  82%

| Now let's test out your telegram function. Use your new telegram function passing in
| whatever arguments you wish!

> telegram("Good Morning")
[1] "START Good Morning STOP"

| That's a job well done!

  |================================================================             |  84%

| Make sure to save your script before you type submit().

> mad_libs <- function(...){
+   # Do your argument unpacking here!
+   args <- list(...)
+   
+   place <- args[["place"]]
+   adjective <- args[["adjective"]]
+   noun <- args[["noun"]]
+   # Don't modify any code below this comment.
+   # Notice the variables you'll need to create in order for the code below to
+   # be functional!
+   paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
+ }
> submit()

| Sourcing your script...


| That's a job well done!

  |==================================================================           |  86%

| Time to use your mad_libs function. Make sure to name the place, adjective, and noun
| arguments in order for your function to work.

> mad_libs(place = "London", adjustive = "beautiful", noun = "dog")
[1] "News from London today where  students took to the streets in protest of the new dog being installed on campus."

| Perseverance, that's the answer.

  |====================================================================         |  88%

| We're coming to the end of this lesson, but there's still one more idea you should
| be made aware of.

...

  |=====================================================================        |  90%

| You're familiar with adding, subtracting, multiplying, and dividing numbers in R. To
| do this you use the +, -, *, and / symbols. These symbols are called binary
| operators because they take two inputs, an input from the left and an input from the
| right.

...

  |=======================================================================      |  92%

| In R you can define your own binary operators. In the next script I'll show you how.

...

  |========================================================================     |  94%

| Make sure to save your script before you type submit().

> "%p%" <- function(left,right){ # Remember to add arguments!
+   paste(left,right,sep=" ")
+ }
> submit()

| Sourcing your script...


| That's not the answer I was looking for, but try again.

| Remember: 'Hello' %p% 'student!' is how you use the binary operator.

> "%p%" <- function(left,right){ # Remember to add arguments!
+   paste(left,right,sep=" ")
+ }
> submit()

| Sourcing your script...


| You are really on a roll!

  |==========================================================================   |  96%

| You made your own binary operator! Let's test it out. Paste together the strings:
| 'I', 'love', 'R!' using your new binary operator.

> "I" %p% "love" %p% "R!"
[1] "I love R!"

| You are amazing!

  |===========================================================================  |  98%

| We've come to the end of our lesson! Go out there and write some great functions!

...

  |=============================================================================| 100%v
